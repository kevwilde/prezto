# Load dependencies.
pmodload 'helper'

CURRENT_BG='NONE'
SEGMENT_SEPARATOR='⮀'
RSEGMENT_SEPARATOR=''
ZLE_RPROMPT_INDENT=3


# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    echo -n " %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%} "
  else
    echo -n "%{$bg%}%{$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && print -Pn $3
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}

rprompt_end() {
    echo -n ' '
    echo -n "%{%k%f%}"
    CURRENT_BG=''
}

prompt_segment() {
    local bg fg fake_bg

    [[ -n $1 ]] && bg="$1" || bg='default'
    [[ -n $2 ]] && fg="$2" || fg='default'

    if [[ $CURRENT_BG == 'default' ]]; then
        fake_bg=$SEGMENT_DEFAULT_BG
    else
        fake_bg=$CURRENT_BG
    fi

    if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
        echo -n " %{%K{$bg}%F{$fake_bg}%}$SEGMENT_SEPARATOR%{%F{$fg}%} "
    else
        echo -n "%{%K{$bg}%}%{%F{$fg}%} "
    fi

    CURRENT_BG=$1
    [[ -n $3 ]] && print -Pn $3
}

rprompt_segment() {
    local bg fg fake_bg prev_bg

    [[ -n $1 ]] && bg="$1" || bg='default'
    [[ -n $2 ]] && fg="$2" || fg='default'

    if [[ $bg == 'default' ]]; then
        fake_bg=$SEGMENT_DEFAULT_BG
    else
        fake_bg=$bg
    fi
    prev_bg=$CURRENT_BG

    if [[ $1 != $CURRENT_BG ]]; then
        echo -n " %{%K{$prev_bg}%F{$fake_bg}%}$RSEGMENT_SEPARATOR%{%K{$bg}%F{$fg}%} "
    else
        echo -n "%{%K{$bg}%}%{%F{$fg}%} "
    fi

    CURRENT_BG=$1
    [[ -n $3 ]] && print -Pn $3
}

function build_prompt {
  prompt_segment red black '%(1?;%{%F{red}%}✘ ;)%(!;%{%F{yellow}%}⚡ ;)%(1j;%{%F{cyan}%}%j⚙ ;)%{%F{black}%}%n'
  
  if [[ -n $VIRTUAL_ENV ]] then
    prompt_segment yellow black '$(virtualenv_info)'
  fi

  if $git_status; then
    prompt_segment blue black '${(e)git_info[prompt]}${git_info[status]}'
  fi

  prompt_segment black red '%2~'

  prompt_end
}



function build_rprompt {
  rprompt_segment black red '%D{%L:%M:%S}'
  rprompt_end
}

start_time=$SECONDS
function prompt_paradox_preexec {
  start_time=$SECONDS
}

function calc_elapsed_time {
  if [[ $timer_result -ge 3600 ]]; then
    let "timer_hours = $timer_result / 3600"
    let "remainder = $timer_result % 3600"
    let "timer_minutes = $remainder / 60"
    let "timer_seconds = $remainder % 60"
    print -P "%B%F{red}>>> elapsed time ${timer_hours}h${timer_minutes}m${timer_seconds}s%b"
  elif [[ $timer_result -ge 60 ]]; then
    let "timer_minutes = $timer_result / 60"
    let "timer_seconds = $timer_result % 60"
    print -P "%B%F{yellow}>>> elapsed time ${timer_minutes}m${timer_seconds}s%b"
  elif [[ $timer_result -gt 10 ]]; then
    print -P "%B%F{green}>>> elapsed time ${timer_result}s%b"
  fi
}

function virtualenv_info { [ $VIRTUAL_ENV ] && echo `basename $VIRTUAL_ENV` } 

function prompt_paradox_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git_status=git-info
  fi
  timer_result=$(($SECONDS-$start_time))
  if [[ $timer_result -gt 10 ]]; then
    calc_elapsed_time
  fi
  start_time=$SECONDS
}

function prompt_paradox_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook preexec prompt_paradox_preexec
  add-zsh-hook precmd prompt_paradox_precmd

  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{red}>%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}<%f%b'
  zstyle ':prezto:module:git:info:action' format '! %s'
  zstyle ':prezto:module:git:info:added' format '✚'
  zstyle ':prezto:module:git:info:ahead' format '⬆'
  zstyle ':prezto:module:git:info:behind' format '⬇'
  zstyle ':prezto:module:git:info:branch' format '⭠ %b'
  zstyle ':prezto:module:git:info:commit' format '➦ %.7c'
  zstyle ':prezto:module:git:info:deleted' format '✖'
  zstyle ':prezto:module:git:info:modified' format '✱'
  zstyle ':prezto:module:git:info:position' format '%p'
  zstyle ':prezto:module:git:info:renamed' format '➙'
  zstyle ':prezto:module:git:info:stashed' format 's'
  zstyle ':prezto:module:git:info:unmerged' format '═'
  zstyle ':prezto:module:git:info:untracked' format '?'
  zstyle ':prezto:module:git:info:keys' format \
    'prompt' '$(coalesce "%b" "%p" "%c")%s' \
    'status' ' %A%B%S%a%d%m%r%U%u'

  # Define prompts.
  PROMPT='
%{%f%b%k%}$(build_prompt)
 ${editor_info[keymap]} '
  RPROMPT='$(build_rprompt)'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_paradox_setup "$@"
